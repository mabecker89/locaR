% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/omniSpectro.R
\name{omniSpectro}
\alias{omniSpectro}
\title{Generate grid of spectrograms for detecting sounds of interest.}
\usage{
omniSpectro(st, lm, intervalLength = 5, intervals = "all")
}
\arguments{
\item{st}{List. Localization settings object generated using
\code{\link{processSettings}}.}

\item{lm}{layout matrix generated using the `layoutMatrix()` function, or a
user-generated matrix in the same format. This matrix controls how the spectrograms
from each station are mapped to rows and columns.}

\item{intervalLength}{Integer The length of each view interval to be generated, in seconds.
Consecutive windows overlap, by default by 1 second. Setting intervalLength = 5 will therefore
create 6-second spectrogram views, with one second overlap (e.g.
0 to 6, then 5 to 11, 10 to 16, etc.).}

\item{intervals}{Integer or 'all'. Which intervals to write to jpeg. For testing
purposes, it is often desirable to set this to, e.g. intervals = 1:5, which
will create only the first five view windows, to ensure the function is working.}
}
\description{
\code{omniSpectro} creates a grid of time-synchronized spectrograms, to
facilitate the manual detection of birds across a microphone array. By opening
the resulting jpeg images in an image viewing program (e.g. the standard Microsoft Photos app),
short clips of sounds can be viewed across an entire microphone array at once.
The authors of this package have found this to be an efficient way to view spectrograms,
while effectively eliminating the likelihood of double-counting sound sources that
may be clearly detectable on many microphones at the same time. At the present time,
this function only works when a settings object, st, is provided.
}
